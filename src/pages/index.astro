---
// src/pages/index.astro
import "../styles/main.css";
---

<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Tally Counter</title>
</head>

<body class="min-h-screen bg-gradient-to-br from-gray-50 to-white flex items-center justify-center p-6">
    <button id="themeToggle" class="theme-toggle" title="Toggle theme">
        <span id="themeIcon">🌙</span>
    </button>

    <div class="w-full max-w-md">
        <div class="card-bg bg-white/80 glass-effect rounded-2xl p-8 shadow-lg shadow-black/5 border border-white/20 transition-all duration-300">
            <div class="text-center mb-10">
                <div id="counter" class="counter-text text-7xl font-light text-gray-900 mb-6 transition-all duration-300 tracking-tight">
                    0
                </div>
                <div class="divider w-12 h-px bg-gradient-to-r from-transparent via-gray-300 to-transparent mx-auto transition-all duration-300"></div>
            </div>

            <div class="flex gap-3 mb-6">
                <button 
                    id="decrementBtn"
                    class="btn-secondary flex-1 h-14 text-lg font-medium text-gray-700 hover:text-gray-900 bg-white hover:bg-gray-50 transition-all duration-200 rounded-xl shadow-sm hover:shadow-md border border-gray-200/60 hover:border-gray-300/60 active:scale-[0.98]"
                >
                    −
                </button>
                
                <button 
                    id="incrementBtn"
                    class="btn-primary flex-1 h-14 text-lg font-medium text-white bg-gray-900 hover:bg-gray-800 transition-all duration-200 rounded-xl shadow-sm hover:shadow-lg active:scale-[0.98]"
                >
                    +
                </button>
            </div>

            <div class="flex gap-3 mb-8">
                <button 
                    id="undoBtn"
                    class="btn-tertiary flex-1 h-10 text-sm font-medium text-gray-600 hover:text-gray-800 bg-gray-50 hover:bg-gray-100 transition-all duration-200 rounded-lg disabled:opacity-40 disabled:cursor-not-allowed"
                    disabled
                >
                    Undo
                </button>
                
                <button 
                    id="resetBtn"
                    class="btn-tertiary flex-1 h-10 text-sm font-medium text-gray-600 hover:text-gray-800 bg-gray-50 hover:bg-gray-100 transition-all duration-200 rounded-lg"
                >
                    Reset
                </button>
            </div>

            <div class="flex justify-center gap-8 pt-4 border-t border-divider border-gray-100 transition-all duration-300">
                <div class="text-center">
                    <div class="stat-label text-xs font-medium text-gray-400 uppercase tracking-wide mb-1 transition-colors duration-300">Total</div>
                    <div id="totalTaps" class="stat-value text-sm font-semibold text-gray-700 transition-colors duration-300">0</div>
                </div>
                <div class="text-center">
                    <div class="stat-label text-xs font-medium text-gray-400 uppercase tracking-wide mb-1 transition-colors duration-300">Session</div>
                    <div id="sessionTime" class="stat-value text-sm font-semibold text-gray-700 transition-colors duration-300">00:00</div>
                </div>
            </div>
        </div>

        <div class="hint-text text-center mt-6 text-xs text-gray-400 font-medium transition-colors duration-300">
            Space • Backspace • R
        </div>
    </div>

    <script>
        class ModernMinimalistCounter {
            constructor() {
                this.count = 0;
                this.totalTaps = 0;
                this.history = [];
                this.startTime = Date.now();
                this.isDark = false;
                
                this.counterEl = null;
                this.totalTapsEl = null;
                this.sessionTimeEl = null;
                this.incrementBtn = null;
                this.decrementBtn = null;
                this.resetBtn = null;
                this.undoBtn = null;
                this.themeToggle = null;
                this.themeIcon = null;
                
                this.initElements();
                this.bindEvents();
                this.initTheme();
                this.startTimer();
            }

            initElements() {
                this.counterEl = document.getElementById('counter');
                this.totalTapsEl = document.getElementById('totalTaps');
                this.sessionTimeEl = document.getElementById('sessionTime');
                this.incrementBtn = document.getElementById('incrementBtn');
                this.decrementBtn = document.getElementById('decrementBtn');
                this.resetBtn = document.getElementById('resetBtn');
                this.undoBtn = document.getElementById('undoBtn');
                this.themeToggle = document.getElementById('themeToggle');
                this.themeIcon = document.getElementById('themeIcon');
            }

            bindEvents() {
                this.incrementBtn.addEventListener('click', () => this.increment());
                this.decrementBtn.addEventListener('click', () => this.decrement());
                this.resetBtn.addEventListener('click', () => this.reset());
                this.undoBtn.addEventListener('click', () => this.undo());
                this.themeToggle.addEventListener('click', () => this.toggleTheme());

                document.addEventListener('keydown', (e) => {
                    switch(e.code) {
                        case 'Space':
                            e.preventDefault();
                            this.increment();
                            this.animateButton(this.incrementBtn);
                            break;
                        case 'Backspace':
                            e.preventDefault();
                            this.decrement();
                            this.animateButton(this.decrementBtn);
                            break;
                        case 'KeyR':
                            this.reset();
                            this.animateButton(this.resetBtn);
                            break;
                        case 'KeyT':
                            this.toggleTheme();
                            break;
                    }
                });
            }

            initTheme() {
                const savedTheme = this.getStoredTheme();
                if (savedTheme) {
                    this.isDark = savedTheme === 'dark';
                } else {
                    this.isDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
                }
                this.applyTheme();
            }

            getStoredTheme() {
                try {
                    return localStorage.getItem('theme');
                } catch {
                    return null;
                }
            }

            setStoredTheme(theme) {
                try {
                    localStorage.setItem('theme', theme);
                } catch {
                    
                }
            }

            toggleTheme() {
                this.isDark = !this.isDark;
                this.applyTheme();
                this.setStoredTheme(this.isDark ? 'dark' : 'light');
            }

            applyTheme() {
                if (this.isDark) {
                    document.body.classList.add('dark');
                    this.themeIcon.textContent = '☀️';
                } else {
                    document.body.classList.remove('dark');
                    this.themeIcon.textContent = '🌙';
                }
            }

            increment() {
                this.history.push(this.count);
                this.count++;
                this.totalTaps++;
                this.updateDisplay();
                this.animateCounter();
            }

            decrement() {
                if (this.count > 0) {
                    this.history.push(this.count);
                    this.count--;
                    this.totalTaps++;
                    this.updateDisplay();
                    this.animateCounter();
                }
            }

            reset() {
                if (this.count === 0) return;
                this.history.push(this.count);
                this.count = 0;
                this.updateDisplay();
                this.animateCounter();
            }

            undo() {
                if (this.history.length === 0) return;
                this.count = this.history.pop();
                this.totalTaps = Math.max(0, this.totalTaps - 1);
                this.updateDisplay();
                this.animateCounter();
            }

            updateDisplay() {
                this.counterEl.textContent = this.count.toLocaleString();
                this.totalTapsEl.textContent = this.totalTaps.toLocaleString();
                this.undoBtn.disabled = this.history.length === 0;
            }

            animateCounter() {
                this.counterEl.classList.add('animate-gentle-bounce');
                setTimeout(() => {
                    this.counterEl.classList.remove('animate-gentle-bounce');
                }, 200);
            }

            animateButton(button) {
                button.style.transform = 'scale(0.95)';
                setTimeout(() => {
                    button.style.transform = '';
                }, 100);
            }

            startTimer() {
                setInterval(() => {
                    const elapsed = Date.now() - this.startTime;
                    const minutes = Math.floor(elapsed / 60000);
                    const seconds = Math.floor((elapsed % 60000) / 1000);
                    this.sessionTimeEl.textContent = 
                        `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
                }, 1000);
            }
        }

        document.addEventListener('DOMContentLoaded', () => {
            new ModernMinimalistCounter();
        });
    </script>
</body>
</html>